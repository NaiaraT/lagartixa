<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Joguinho da Lagartixa</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 100vh;
            background-color: #87CEEB; /* Sky blue */
            margin: 0;
            font-family: 'Press Start 2P', cursive;
            color: #333;
            overflow: hidden;
        }
        h1 {
            color: #fff;
            text-shadow: 2px 2px 4px #000000;
            text-align: center;
        }
        #gameContainer {
            position: relative;
            border: 8px solid #D2B48C; /* Tan border */
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
        canvas {
            display: block;
            background-color: #f0f0f0;
        }
        #winMessage {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            display: none; /* Hidden by default */
            justify-content: center;
            align-items: center;
            text-align: center;
            font-size: 1.5em; /* Adjusted for better fit */
            flex-direction: column;
            padding: 20px;
        }
        #winMessage button {
            margin-top: 20px;
            padding: 15px 30px;
            font-family: 'Press Start 2P', cursive;
            font-size: 0.5em;
            background-color: #4CAF50; /* Green */
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            text-transform: uppercase;
        }
        #winMessage button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>

    <h1>Desafio da lagartixa:pegue o macarr√£o</h1>
    <div id="gameContainer">
        <canvas id="gameCanvas" width="800" height="400"></canvas>
        <div id="winMessage">
            <p>Feliz dia dos namorados, minha lagartixa! ‚ù§Ô∏è</p>
            <button onclick="restartGame()">Jogar de Novo</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const winMessage = document.getElementById('winMessage');

        // --- Game Configuration ---
        const GRAVITY = 0.6;
        const LIZARD_JUMP_FORCE = -15;
        const LIZARD_SPEED = 5;

        // --- Game Objects ---
        // Player (Lizard)
        const lizard = {
            x: 50,
            y: canvas.height - 90,
            width: 50,
            height: 50,
            dx: 0,
            dy: 0,
            onGround: false,
            emoji: 'ü¶é',
            direction: -1 // Start facing right. -1 for right, 1 for left.
        };

        // Goal (Pasta)
        const pasta = {
            x: canvas.width - 100,
            y: canvas.height - 90,
            width: 50,
            height: 50,
            emoji: 'üçù'
        };

        // Obstacles and Platforms
        const platforms = [
            // Ground
            { x: 0, y: canvas.height - 40, width: canvas.width, height: 40, color: '#228B22' },
            // Floating platforms
            { x: 150, y: 280, width: 100, height: 20, color: '#D2691E' },
            { x: 320, y: 220, width: 100, height: 20, color: '#D2691E' },
            { x: 500, y: 160, width: 100, height: 20, color: '#D2691E' },
            { x: 650, y: 280, width: 80, height: 20, color: '#D2691E' },
            // Obstacles (Cacti)
            { x: 250, y: canvas.height - 90, width: 30, height: 50, emoji: 'üåµ' },
            { x: 420, y: canvas.height - 90, width: 30, height: 50, emoji: 'üåµ' },
            { x: 530, y: 110, width: 30, height: 50, emoji: 'üåµ' }, // Cactus on a platform
        ];
        
        // --- Input Handling ---
        const keys = {
            right: false,
            left: false,
            up: false
        };

        document.addEventListener('keydown', (e) => {
            if (e.code === 'ArrowRight') keys.right = true;
            if (e.code === 'ArrowLeft') keys.left = true;
            if (e.code === 'Space' || e.code === 'ArrowUp') keys.up = true;
        });

        document.addEventListener('keyup', (e) => {
            if (e.code === 'ArrowRight') keys.right = false;
            if (e.code === 'ArrowLeft') keys.left = false;
            if (e.code === 'Space' || e.code === 'ArrowUp') keys.up = false;
        });
        
        // --- Drawing Functions ---
        function drawLizard() {
            ctx.save(); // Save the current canvas state
            const lizardCenterX = lizard.x + lizard.width / 2;
            ctx.translate(lizardCenterX, 0);
            ctx.scale(lizard.direction, 1); // Flip based on direction

            // Draw Hair
            ctx.fillStyle = '#000000'; // Black for hair
            ctx.beginPath();
            const hairX = -lizard.width / 2 + 10;
            const hairY = lizard.y + 10;
            ctx.moveTo(hairX, hairY);
            ctx.bezierCurveTo(hairX - 10, hairY - 20, hairX + 30, hairY - 20, hairX + 20, hairY + 15);
            ctx.fill();
            
            // Draw Lizard Emoji
            ctx.font = '48px serif';
            ctx.fillText(lizard.emoji, -lizard.width / 2, lizard.y + lizard.height);
            
            ctx.restore(); // Restore the canvas to its original state
        }

        function drawPasta() {
            ctx.font = '48px serif';
            ctx.fillText(pasta.emoji, pasta.x, pasta.y + pasta.height);
        }

        function drawPlatforms() {
            platforms.forEach(platform => {
                if(platform.color) {
                    ctx.fillStyle = platform.color;
                    ctx.fillRect(platform.x, platform.y, platform.width, platform.height);
                }
                if(platform.emoji) {
                    ctx.font = '48px serif';
                    ctx.fillText(platform.emoji, platform.x, platform.y + platform.height);
                }
            });
        }
        
        // --- Game Logic Loop ---
        let animationFrameId;

        function updateLogic() {
            // Horizontal movement and direction update
            if (keys.right) {
                lizard.x += LIZARD_SPEED;
                lizard.direction = -1; // Face right (flip the emoji)
            }
            if (keys.left) {
                lizard.x -= LIZARD_SPEED;
                lizard.direction = 1; // Face left (default emoji direction)
            }
            
            // Jumping
            if (keys.up && lizard.onGround) {
                lizard.dy = LIZARD_JUMP_FORCE;
                lizard.onGround = false;
            }

            // Apply gravity
            lizard.y += lizard.dy;
            lizard.dy += GRAVITY;
            
            lizard.onGround = false;

            // Collision detection
            platforms.forEach(platform => {
                const isColliding = lizard.x < platform.x + platform.width &&
                                  lizard.x + lizard.width > platform.x &&
                                  lizard.y < platform.y + platform.height &&
                                  lizard.y + lizard.height > platform.y;

                if (isColliding) {
                    // Obstacle collision (cactus) - resets position
                    if (platform.emoji) {
                        setTimeout(() => resetLizardPosition(), 50);
                        return;
                    }
                    
                    // Platform collision (landing on top)
                    if (lizard.dy >= 0 && lizard.y + lizard.height - lizard.dy <= platform.y) {
                         lizard.dy = 0;
                         lizard.y = platform.y - lizard.height;
                         lizard.onGround = true;
                    }
                }
            });

            // Prevent falling off the canvas edges
            if (lizard.x < 0) lizard.x = 0;
            if (lizard.x + lizard.width > canvas.width) {
                lizard.x = canvas.width - lizard.width;
            }

            // Check for win condition (reaching the pasta)
            if (lizard.x < pasta.x + pasta.width &&
                lizard.x + lizard.width > pasta.x &&
                lizard.y < pasta.y + pasta.height &&
                lizard.y + lizard.height > pasta.y) {
                showWinMessage();
            }
        }

        function render() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawPlatforms();
            drawLizard();
            drawPasta();
        }

        function gameLoop() {
            updateLogic();
            render();
            animationFrameId = requestAnimationFrame(gameLoop);
        }

        // --- Game State Functions ---
        function showWinMessage() {
            cancelAnimationFrame(animationFrameId); // Stop the game loop
            winMessage.style.display = 'flex';
        }
        
        function resetLizardPosition() {
             lizard.x = 50;
             lizard.y = canvas.height - 90;
             lizard.dy = 0;
             lizard.direction = -1; // Face right when game restarts
        }

        function restartGame() {
            winMessage.style.display = 'none';
            resetLizardPosition();
            gameLoop(); // Start the game loop again
        }

        // --- Start the Game ---
        gameLoop();
    </script>

</body>
</html>
